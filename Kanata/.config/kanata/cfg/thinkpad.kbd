;; [allisnulll/keyboard](https://github.com/allisnulll/keyboard/tree/main)
;; Lenovo Thinkpad t480s
(defcfg
    notify-error      yes
    danger-enable-cmd yes
)

(defsrc
    esc  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10  f11  f12 home end  ins  del
    grv  1    2    3    4    5    6    7    8    9    0    -    =         bspc
    tab       q    w    e    r    t    y    u    i    o    p    [    ]    \
    caps      a    s    d    f    g    h    j    k    l    ;    '         ent
    lsft      z    x    c    v    b    n    m    ,    .    /              rsft
    lctl wkup lmet lalt           spc            ralt prnt rctl pgup up   pgdn
                                                                left down rght
)

(deflayer graphite-home-row
    _    _   _   _   _   _   _   _   _   _   _    _    _   @hmr @lyt @rst _
    @~   _    _    _    _    _    _    _    _    _    _    _    _         _
    _         b    l    d    w    z    '    f    o    u    j    _    _    _
    @md1      @hr1 @hr2 @hr3 @hr4 g    y    @hr5 @hr6 @hr7 @hr8 @md2      @md3
    @lsf      q    x    m    c    v    k    p    _    _    _              @rsf
    _    _    _    @md4           _              @md5 _    rmet _    _    _
                                                                _    _    _
)

(deflayer graphite-no-home-row
    _    _   _   _   _   _   _   _   _   _   _    _    _   @hmr @lyt @rst _
    @~   _    _    _    _    _    _    _    _    _    _    _    _         _
    _         b    l    d    w    z    '    f    o    u    j    _    _    _
    @md1      n    r    t    s    g    y    h    a    e    i    @md2      @md3
    @lsf      q    x    m    c    v    k    p    _    _    _              @rsf
    _    _    _    @md4           _              @md5 _    rmet _    _    _
                                                                _    _    _
)

(deflayer graphite
    _    _   _   _   _   _   _   _   _   _   _    _    _   @hmr @lyt @rst _
    @~   _    _    _    _    _    _    _    _    _    _    _    _         _
    _         b    l    d    w    z    '    f    o    u    j    _    _    _
    _         n    r    t    s    g    y    h    a    e    i    ;         _
    _         q    x    m    c    v    k    p    _    _    _              _
    _    _    _    _              _              _    _    rmet _    _    _
                                                                _    _    _
)

(deflayer qwerty-home-row
    _    _   _   _   _   _   _   _   _   _   _    _    _   @hmr @lyt @rst _
    @~   _    _    _    _    _    _    _    _    _    _    _    _         _
    _         _    _    _    _    _    _    _    _    _    _    _    _    _
    @md1      @hr1 @hr2 @hr3 @hr4 _    _    @hr5 @hr6 @hr7 @hr8 @md2      @md3
    @lsf      _    _    _    _    _    _    _    _    _    _              @rsf
    _    _    _    @md4           _              @md5 _    rmet _    _    _
                                                                _    _    _
)

(deflayer qwerty-no-home-row
    _    _   _   _   _   _   _   _   _   _   _    _    _   @hmr @lyt @rst _
    @~   _    _    _    _    _    _    _    _    _    _    _    _         _
    _         _    _    _    _    _    _    _    _    _    _    _    _    _
    @md1      _    _    _    _    _    _    _    _    _    _    @md2      @md3
    @lsf      _    _    _    _    _    _    _    _    _    _              @rsf
    _    _    _    @md4           _              @md5 _    rmet _    _    _
                                                                _    _    _
)

(deflayermap (qwerty)
    home @hmr
    end  @lyt
    ins  @rst
)

;; NOTE: Had to move nav keys up to avoid key ghosting
(deflayer nav
    caps nlck slck _   _   _   _   _   _   _   _   _   _   _    _    _    _
    @cw  _    home up   end  _    _    _    _    brdn brup vold volu      mute
    @tb1      tab  left down rght _    _    mwu  mwd  mwl  mwr  prev next pp
    _         ent  ins  pgup pgdn _    _    _    _    _    _    _         _
    _         _    _    _    _    _    _    _    _    _    _              _
    _    _    _    del            bspc           _    _    _    _    _    _
                                                                _    _    _
)

(deflayer sym
    _    _    _    _   _   _   _   _   _   _   _   _   _   _    _    _    _
    _    _    _    _    _    _    _    _    _    _    _    _    _         _
    _         _    _    @~   @&   @!   @#   @|   grv  _    _    _    _    _
    _         @<   [    @{   @op  -    @_   @cp  @}   ]    @>   _         _
    _         =    _    _    \    @@   @$   @%   _    _    =              _
    _    _    _    _              _              _    _    _    _    _    _
                                                                _    _    _
)

(deflayer num
    _    _    _    _   _   _   _   _   _   _   _   _   _   _    _    _    _
    _    _    _    _    _    _    _    _    _    _    _    _    _         _
    _         _    _    _    _    _    _    _    _    _    _    _    _    _
    _         1    2    3    4    5    6    7    8    9    0    _         _
    _         _    _    _    _    _    _    _    _    _    _              _
    _    _    _    _              _              _    _    _    _    _    _
                                                                _    _    _
)

(deflayer num-pad
    _    _    _    _   _   _   _   _   _   _   _   _   _   _    _    _    _
    _    @ch8 @ch4 @ch2 @ch1 _    _    _    @ch8 @ch4 @ch2 @ch1 _         _
    _         _    _    _    _    _    =    kp7  kp8  kp9  @+   _    _    _
    _         _    _    _    _    _    kp0  kp4  kp5  kp6  @*   _         _
    _         _    _    _    _    _    @.   kp1  kp2  kp3  @^             _
    _    _    _    _              _              _    _    _    _    _    _
                                                                _    _    _
)

(deflayer fun
    _    _    _    _   _   _   _   _   _   _   _   _   _   _    _    _    _
    _    _    _    _    _    _    _    _    _    _    _    _    _         _
    _         @f12 @f7  @f8  @f9  _    _    _    _    _    _    _    _    _
    _         @f11 @f4  @f5  @f6  _    _    _    _    _    _    _         _
    _         @f10 @f1  @f2  @f3  _    _    _    _    _    _              _
    _    _    _    _              _              _    _    _    _    _    _
                                                                _    _    _
)

(deflayermap (vim)
    h @lft
    j @dwn
    k @up
    l @rgt
    ; @;
    ' @'
)

;; NOTE: Custom Layer for using Video Speed Controler Browser extension
(deflayer navyt
    _    _    _    _   _   _   _   _   _   _   _   _   _   _    _    _    _
    _    _    _    _    _    _    _    _    _    _    _    _    _         _
    @tb2      q    w    e    r    _    _    _    _    _    _    _    _    _
    _         a    s    d    f    g    _    _    _    _    _    _         _
    _         _    _    _    v    b    _    _    _    _    _              _
    _    _    _    _              _              _    _    _    _    _    _
                                                                _    _    _
)

(defvar
    tap-time     100
    hold-time    145
    hold-time2   130
    timeout      300
    long-timeout 3250
)

(defalias
    nhr (cmd /usr/bin/notify-send -u normal "Kanata" "Switched to Homerow & Special Keys")
    nnh (cmd /usr/bin/notify-send -u normal "Kanata" "Switched to Special Keys")
    nnk (cmd /usr/bin/notify-send -u normal "Kanata" "Switched to Normal Keys")
    ngr (cmd /usr/bin/notify-send -u normal "Kanata" "Switched to Graphite")
    nqw (cmd /usr/bin/notify-send -u normal "Kanata" "Switched to Qwerty")
    nrs (cmd /usr/bin/notify-send -u normal "Kanata" "Config Reloaded")

    hmr (tap-dance $timeout (_ (fork
        (switch 
            ((base-layer graphite)) (multi (layer-switch graphite-home-row) @nhr) break
            ((base-layer qwerty)) (multi (layer-switch qwerty-home-row) @nhr) break
            ((base-layer graphite-no-home-row)) (multi (layer-switch graphite-home-row) @nhr) break
            ((base-layer qwerty-no-home-row)) (multi (layer-switch qwerty-home-row) @nhr) break
            ((base-layer graphite-home-row)) (multi (layer-switch graphite) @nnk) break
            ((base-layer qwerty-home-row)) (multi (layer-switch qwerty) @nnk) break
        )
        (multi
            (release-key lsft)
            (release-key rsft)
            (release-key d)
            (release-key k)
            (switch
                ((or (base-layer graphite) (base-layer graphite-home-row)))
                    (multi (layer-switch graphite-no-home-row) @nnh) break
                ((or (base-layer qwerty) (base-layer qwerty-home-row)))
                    (multi (layer-switch qwerty-no-home-row) @nnh) break
            )
        )
        (lsft rsft d k)
    )))
    lyt (tap-dance $timeout (_ (multi
        (cmd /home/allisnull/.dotfiles/scripts/graphite2qwerty.sh)
        (switch 
            ((base-layer graphite)) (multi (layer-switch qwerty) @nqw) break
            ((base-layer qwerty)) (multi (layer-switch graphite) @ngr) break
            ((base-layer graphite-no-home-row)) (multi (layer-switch qwerty-no-home-row) @nqw) break
            ((base-layer qwerty-no-home-row)) (multi (layer-switch graphite-no-home-row) @nqw) break
            ((base-layer graphite-home-row)) (multi (layer-switch qwerty-home-row) @nqw) break
            ((base-layer qwerty-home-row)) (multi (layer-switch graphite-home-row) @ngr) break
        )
    )))
    rst (tap-dance $timeout (_ (multi lrld @nrs)))

    ~ (fork S-grv (unshift grv) (lsft rsft d k))

    hrk9 (switch
        ((base-layer graphite-home-row)) ; break
        ((base-layer qwerty-home-row))   ' break
    )

    cw  (caps-word $long-timeout)

    md1 (fork
        (tap-dance $timeout (
            (tap-hold $tap-time $hold-time esc (layer-toggle nav))
            (layer-toggle navyt)
        ))
        (multi
            (release-key lsft)
            (release-key rsft)
            (release-key d)
            (release-key k)
            @cw
        )
        (lsft rsft d k)
    )

    md2 (tap-dance $timeout (
        (tap-hold $tap-time $hold-time @hrk9 (layer-toggle num))
        (layer-toggle num-pad)
    ))
    md3 (tap-hold $tap-time $hold-time2 _   (layer-toggle nav))
    md4 (tap-hold $tap-time $hold-time rpt (layer-toggle fun))
    md5 (tap-hold $tap-time $hold-time rpt (layer-toggle vim))

    lsf (tap-hold $tap-time $hold-time (one-shot $long-timeout lsft) (layer-toggle sym))
    rsf (tap-hold $tap-time $hold-time (one-shot $long-timeout rsft) (layer-toggle sym))

    hrk1 (switch
        ((base-layer graphite-home-row)) n break
        ((base-layer qwerty-home-row))   a break
    )
    hrk2 (switch
            ((base-layer graphite-home-row)) r break
        ((base-layer qwerty-home-row))   s break
    )
    hrk3 (switch
        ((base-layer graphite-home-row)) t break
        ((base-layer qwerty-home-row))   d break
    )
    hrk4 (switch
        ((base-layer graphite-home-row)) s break
        ((base-layer qwerty-home-row))   f break
    )
    hrk5 (switch
        ((base-layer graphite-home-row)) h break
        ((base-layer qwerty-home-row))   j break
    )
    hrk6 (switch
        ((base-layer graphite-home-row)) a break
        ((base-layer qwerty-home-row))   k break
    )
    hrk7 (switch
        ((base-layer graphite-home-row)) e break
        ((base-layer qwerty-home-row))   l break
    )
    hrk8 (switch
        ((base-layer graphite-home-row)) i break
        ((base-layer qwerty-home-row))   ; break
    )

    hr1 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk1 lmet) @hrk1))
    hr2 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk2 lalt) @hrk2))
    hr3 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk3 lsft) @hrk3))
    hr4 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk4 lctl) @hrk4))
    hr5 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk5 rctl) @hrk5))
    hr6 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk6 rsft) @hrk6))
    hr7 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk7 ralt) @hrk7))
    hr8 (tap-dance $timeout ((tap-hold-release $tap-time $hold-time @hrk8 rmet) @hrk8))

    tb1 C-tab
    tb2 C-S-tab

    !  RS-1
    &  S-7
    |  S-\
    @  RS-2
    _  S--  
    %  RS-5
    #  RS-3
    $  RS-4
    <  S-,
    {  S-[
    op S-9
    cp S-0
    }  S-]
    >  S-.

    * (fork kp* kp/         (lsft rsft d k))
    + (fork kp+ kp-         (lsft rsft d k))
    ^ (fork S-6 S-5         (lsft rsft d k))
    . (fork kp. (unshift ,) (lsft rsft d k))

    f1  (fork f1  f13 (lsft rsft d k))
    f2  (fork f2  f14 (lsft rsft d k))
    f3  (fork f3  f15 (lsft rsft d k))
    f4  (fork f4  f16 (lsft rsft d k))
    f5  (fork f5  f17 (lsft rsft d k))
    f6  (fork f6  f18 (lsft rsft d k))
    f7  (fork f7  f19 (lsft rsft d k))
    f8  (fork f8  f20 (lsft rsft d k))
    f9  (fork f9  f21 (lsft rsft d k))
    f10 (fork f10 f22 (lsft rsft d k))
    f11 (fork f11 f23 (lsft rsft d k))
    f12 (fork f12 f24 (lsft rsft d k))

    lft (switch
        ((or (base-layer graphite) (base-layer graphite-home-row))) h break
        ((or (base-layer qwerty)   (base-layer qwerty-home-row)))   y break
    )
    dwn (switch
        ((or (base-layer graphite) (base-layer graphite-home-row))) j break
        ((or (base-layer qwerty)   (base-layer qwerty-home-row)))   h break
    )
    up (switch
        ((or (base-layer graphite) (base-layer graphite-home-row))) k break
        ((or (base-layer qwerty)   (base-layer qwerty-home-row)))   a break
    )
    rgt (switch
        ((or (base-layer graphite) (base-layer graphite-home-row))) l break
        ((or (base-layer qwerty)   (base-layer qwerty-home-row)))   e break
    )
    ; (switch
        ((or (base-layer graphite) (base-layer graphite-home-row))) ; break
        ((or (base-layer qwerty)   (base-layer qwerty-home-row)))   i break
    )
    ' (switch
        ((or (base-layer graphite) (base-layer graphite-home-row))) ' break
        ((or (base-layer qwerty)   (base-layer qwerty-home-row)))   ; break
    )
)

(defchords binary $timeout
    (1      ) 1
    (  2    ) 2
    (1 2    ) 3
    (    4  ) 4
    (1   4  ) 5
    (  2 4  ) 6
    (1 2 4  ) 7
    (      8) 8
    (1     8) 9
    (  2   8) (multi 1 0)
    (1 2   8) (multi 1 1)
    (    4 8) (multi 1 2)
    (1   4 8) (multi 1 3)
    (  2 4 8) (multi 1 4)
    (1 2 4 8) (multi 1 5)
)

(defalias
    ch1 (chord binary 1)
    ch2 (chord binary 2)
    ch4 (chord binary 4)
    ch8 (chord binary 8)
)

(defzippy
    zippy.txt
    output-character-mappings (
        @ S-2
    )
)
